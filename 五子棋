#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 15
#define COL 15
 
//头文件声明函数
 
void init_board(char board[ROW][COL], int row, int col);
 
//打印棋盘
void print_board(char board[ROW][COL], int row, int col);
 
//玩家下棋
void player_move(char board[ROW][COL], int row, int col);
 
//电脑下棋
void computer_move(char board[ROW][COL], int row, int col);
 
//判断输赢
char is_win(char board[ROW][COL], int row, int col);
void meau()
{
	printf("********************************\n");
	printf("********     1.play      *******\n");
	printf("********     0.exit      *******\n");
	printf("********************************\n");
}
void game()
{
	char board[ROW][COL];
	//初始化棋盘
	init_board(board, ROW, COL);
	//打印棋盘
	print_board(board, ROW, COL);
	//玩家下棋
	char ret = ' ';
	//ret用来接受一个返回值，用来判断输赢
	while (1)
	{
		player_move(board, ROW, COL);
		print_board(board, ROW, COL);
		ret = is_win(board, ROW, COL);
		//判断游戏是否继续
		if (ret != 'C')
		{
			break;//如果不继续，打破循环
		}
		computer_move(board, ROW, COL);
		print_board(board, ROW, COL);
		//判断游戏是否继续
		ret = is_win(board, ROW, COL);
		if (ret != 'C')
		{
			break;//如果不继续，打破循环
		}
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢\n");
	}
	else if (ret == 'Q')
	{
		printf("平局\n");
	}
}
void test()
{
	srand((unsigned int)time(NULL));
	int input = 0;
	do
	{
		meau();
		printf("请输入>:\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("进入三子棋游戏\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新选择\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
//初始化棋盘
void init_board(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
//打印棋盘
void print_board(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}
}
//玩家下棋
void player_move(char board[ROW][COL], int row, int col)
{
	int x = 0; int y = 0;
	printf("玩家下棋\n");
	while (1)
	{
		printf("请输入坐标>:\n");
		scanf("%d %d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该位置已经有棋子了，请重新下棋");
			}
		}
		else
		{
			printf("坐标非法，请重新输入\n");
		}
	}
 
}
 
//电脑下棋
void computer_move(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑下棋\n");
	while (1)
	{
		x = rand() % row + 1;
		y = rand() % col + 1;
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '#';
				break;
			}
		}
	}
}
//判断棋盘是否满了
int is_full(char board[ROW][COL], int  row, int  col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;
		}
	}
	return 1;
}
//判断输赢
char is_win(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j=0;
	//判断三行
	for (i = 0; i < row; i++)
	{
		for(j=0;j<col-4;j++){
				if (board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2]==board[i][j+3]&&board[i][j+3]==board[i][j+4]&&board[i][j]!= ' ')
		{
			return board[i][j];
		}
	}
}
	//判断三列
	for (i = 0; i < col; i++)
	{
		for(j=0;j<row-4;j++){
		        if (board[j][i] == board[j+1][i] && board[j+1][i] == board[j+2][i]&&board[j+2][i]==board[j+3][i]&&board[j+3][i]==board[j+4][i]&&board[j][i]!= ' ')
		{
			return board[j][i];
		}
		}
	}
	//判断主对角线
	for(i=0;i<row-4;i++){
		for(j=0;j<col-4;j++){
			if(board[i][j]==board[i+1][j+1]&&board[i+1][j+1]==board[i+2][j+2]&&board[i+2][j+2]==board[i+3][j+3]&&board[i+3][j+3]==board[i+4][j+4]&&board[i][j]!=' '){
			    return board[i][j];
		    }
		}
	}
	//判断副对角线
	for(i=row;i>3;i--){
		for(j=col;j>3;j--){
			if(board[i][j]==board[i-1][j-1]&&board[i-1][j-1]==board[i-2][j-2]&&board[i-2][j-2]==board[i-3][j-3]&&board[i-3][j-3]==board[i-4][j-4]&&board[i][j]!=' '){
				return board[i][j];
			}
		}
	}
	if (is_full(board, row, col) == 1)
	{
		return 'Q';
	}
	return 'C';
}
